fed_name: Battery
fed_conf:
  model_script : test_case1_1/Battery_messages.py
  class_name: Battery
  n_instances: 1
  RL_training: true
  mem_attrs : [params.SOC, outputs.energy_out] # possibilities None no memory, [empty list] memorize all
  real_period: 3600
fed_info:
  broker: null
  broker_init: null
  broker_key: null
  broker_port: null
  core_init: null #for debugging only
  core_name: battery_core
  core_type: zmq
  local_port: null
  separator: null
fed_flags:
  UNINTERRUPTIBLE: False
  WAIT_FOR_CURRENT_TIME_UPDATE: False
  TERMINATE_ON_ERROR: True

fed_properties:
  TIME_DELTA: 1e-09
  TIME_PERIOD: 3600
  TIME_OFFSET: 0.7
  TIME_STOPTIME: 172800


fed_connections:
  sub: {}
  pub:
    0: [{
      "key": "energy_out",
      "type": "double",
      "units": "Wh",
    }]

  end:
    0:
      controllable_var: []
#    1:
#      "destinations": [ "Receiver/1"]
#      "sources": [ ] #this works if i want to subscribe to a value (e.g. pubblication) is useful to read data from sims that do not have endpoints and do not receive messages
#      "var_in": [ test_message ]
#      "var_out": [ [ test_message ]]

  inp:
    0: [ {
      "key": "power",
      "type": "double",
      "units": "W",
      "multi_input_handling_method": "sum",
      "targets": [
        "PV/0/Power_PV",
        "Building/0/plug",
      ]
    }]

model_conf:
  params:
    rated_capacity: [40000]
    maximum_charge_power: [8000]
    maximum_discharge_power: [8000]
    SOC_upper_limit: [0.95]
    SOC_lower_limit: [0.25]
    charge_efficiency: [1]
    discharge_efficiency: [1]
    self_discharge_rate: [0]
    SOC: [0.9]
  init_state:
    inputs.power: [ 0.0 ]
    outputs.energy_out: [ 0.0 ]

