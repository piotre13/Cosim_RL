fed_name: Battery
fed_conf:
  model_script : test_case1/Battery.py
  class_name: Battery
  n_instances: 2
  RL_training: true
  mem_attrs : [params.SOC, outputs.energy_out] # possibilities None no memory, [empty list] memorize all
  real_period: 3600
fed_info:
  broker: null
  broker_init: null
  broker_key: null
  broker_port: null
  core_init: null #for debugging only
  core_name: battery_core
  core_type: zmq
  local_port: null
  separator: null
fed_flags:
  SLOW_RESPONDING: False
  DEBUGGING: False
  TERMINATE_ON_ERROR: true
  FORCE_LOGGING_FLUSH: False
  DUMPLOG: False
  OBSERVER: False
  UNINTERRUPTIBLE: False
  INTERRUPTIBLE: True
  SOURCE_ONLY: False
  ONLY_TRANSMIT_ON_CHANGE: False
  ONLY_UPDATE_ON_CHANGE: False
  WAIT_FOR_CURRENT_TIME_UPDATE: True
  RESTRICTIVE_TIME_POLICY: False
  ROLLBACK: False
  FORWARD_COMPUTE: False
  REALTIME: False
  SINGLE_THREAD_FEDERATE: False
  SINGLE_THREAD_CORE: False
  REENTRANT: False
  IGNORE_TIME_MISMATCH_WARNINGS: False
  USE_JSON_SERIALIZATION: False
  EVENT_TRIGGERED: False
  CALLBACK_FEDERATE : False
  AUTOMATED_TIME_REQUEST: False
fed_properties:
  TIME_DELTA: 1e-09
  TIME_PERIOD: 3600
  TIME_OFFSET: 0.0
  TIME_RT_LAG: 0.0
  TIME_RT_LEAD: 0.0
  TIME_RT_TOLERANCE: 0.0
  TIME_INPUT_DELAY: 0.0
  TIME_OUTPUT_DELAY: 0.0
  TIME_STOPTIME: 86400
  TIME_GRANT_TIMEOUT: 0.0
  INT_CURRENT_ITERATION: 0
  INT_MAX_ITERATIONS: 50
  INT_LOG_LEVEL: 3
  INT_FILE_LOG_LEVEL: 3
  INT_CONSOLE_LOG_LEVEL: 3
  INT_LOG_BUFFER: 0
  INT_INDEX_GROUP: -972
fed_connections:
  sub: {}
  pub:
    0: [{
      "key": "energy_out",
      "type": "double",
      "units": "Wh",
    }]
    1: [{
      "key": "energy_out",
      "type": "double",
      "units": "Wh",
    }]
  end: {}
#    0:
#      "destinations": [ "Receiver/0"]
#      "sources": [ ] #this works if i want to subscribe to a value (e.g. pubblication) is useful to read data from sims that do not have endpoints and do not receive messages
#      "var_in": [test_message]
#      "var_out": [[test_message]]
#    1:
#      "destinations": [ "Receiver/1"]
#      "sources": [ ] #this works if i want to subscribe to a value (e.g. pubblication) is useful to read data from sims that do not have endpoints and do not receive messages
#      "var_in": [ test_message ]
#      "var_out": [ [ test_message ]]

  inp:
    0: [ {
      "key": "power",
      "type": "double",
      "units": "W",
      "multi_input_handling_method": "sum",
      "targets": [
        "PV/0/pv",
        "Building/0/plug",
      ]
    }]
    1: [ {
      "key": "power",
      "type": "double",
      "units": "W",
      "multi_input_handling_method": "sum",
      "targets": [
        "PV/1/pv",
        "Building/1/plug"
      ]
    }]
model_conf:
  params:
    rated_capacity: [40000,50000]
    maximum_charge_power: [8000, 6000]
    maximum_discharge_power: [8000, 6000]
    SOC_upper_limit: [0.95, 0.95]
    SOC_lower_limit: [0.25, 0.25]
    charge_efficiency: [1, 1]
    discharge_efficiency: [1, 1]
    self_discharge_rate: [0, 0]
    SOC: [0.9, 0.30]
  init_state: {}
